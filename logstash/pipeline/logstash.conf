input{
	#Entrada de dados enviados pelo filebeat em modo multilinha.
	beats{
		port => 5044 
		codec => plain { 
			#Conversão necessária, pois sem ela a regex se perde nos acentos
			charset => "UTF-8" }
	}
}
filter{
# 	# grok {
# 	# 	match => ["message","\[%{DATESTAMP:timestamp}] (?<STATUS>[a-zA-ZÃ§Ã£]+ [a-zA-Z]+ [a-zA-Z]+\s[a-z]+\s[a-zA-Z]+):\\n%{JAVACLASS:EXCECAO}\\n%{GREEDYDATA:STACKTRACE}",
# 	# 			"message","\[%{DATESTAMP:timestamp}] (?<STATUS>[a-zA-ZÃ§Ã£]+ [a-zA-Z]+ [a-zA-Z]+ [a-z]+ [a-zA-Z]+):\\n%{JAVACLASS:EXCECAO}: %{GREEDYDATA:STACKTRACE}",
# 	# 			"message","\[%{DATESTAMP:timestamp}] (?<STATUS>[a-zA-ZÃ§Ã£]+ [a-zA-Z]+ [a-zA-Z]+ [a-z]+ [a-zA-Z]+):\\n%{JAVACLASS:EXCECAO}\\n%{GREEDYDATA:STACKTRACE}"]
# # }
	if [message] =~ "Exceção Origem: Fim" {
		grok {
			#Regex feita para filtrar logs personalizados do IGESP.
			match => [
				"message","(?m)^\[%{DATESTAMP:DATA}] \.{56}\s*- Nome da Classe: %{JAVACLASS:EXCECAO}\s*- Id da Exceção: %{GREEDYDATA:ID_EXCECAO}\s*- Servidor: %{GREEDYDATA:SERVIDOR} - %{IPV4:IP_SERVIDOR}\s*- Usuário: %{GREEDYDATA:USUARIO}\s*- CPF: %{GREEDYDATA:CPF}\s*- Id da Sessão no SCA: %{GREEDYDATA:ID_SESSAO_SCA}\s*- Endereço IP do Usuário: %{DATA:IP_USUARIO}\s*- Contexto Usuário: (?<CONTEXTO_USUARIO>\[.*])\s*- Debug: %{GREEDYDATA:DEBUG}"
			]
		}	
		date {
    		match => [ "DATA", "dd/MM/yyyy HH:mm:ss" ]
			#Timezone necessária pois no Kibana chega com 3 horas a menos, causando discrepância com logs de outros serviços.
			timezone => "America/Bahia"
    	}
		#Condicionais para adição de filtro contendo nomes amigáveis de Serviços.
		if [ID_EXCECAO] =~ "iGesp01"{
			mutate{
				add_field => { "NOME_SERVIDOR" => "PRODUCAO-01"} 
			}
		} else if [ID_EXCECAO] =~ "iGesp02"{
			mutate{
				add_field => { "NOME_SERVIDOR" => "PRODUCAO-02"}
			}
		} else if [ID_EXCECAO] =~ "PRÉ-PRODUÇÃO"{
			mutate{
				add_field => { "NOME_SERVIDOR" => "PRE-PRODUCAO"}
			}
		} else if [ID_EXCECAO] =~ "HOMOLOGAÇÃO"{
			mutate{
				add_field => { "NOME_SERVIDOR" => "HOMOLOGACAO"}
			}
		} else if [ID_EXCECAO] =~ "DESENVOLVIMENTO"{
			mutate{
				add_field => { "NOME_SERVIDOR" => "DESENVOLVIMENTO"}
			}
		} else if [ID_EXCECAO] =~ "TREINAMENTO"{
			if [SERVIDOR] =~ "igespeap01" {
				mutate{
					add_field => { "NOME_SERVIDOR" => "TREINAMENTO-01"}
				}
			}else {
				mutate{
				add_field => { "NOME_SERVIDOR" => "TREINAMENTO-02"}
				}
			}
		} else if [ID_EXCECAO] =~ "PRODUÇÃO"{
			mutate{
				add_field => { "NOME_SERVIDOR" => "PRODUCAO"}
			}
		}
		mutate {
			add_tag => ["IGESP"]
		}
	} else {
		#Regex para logs do fazendário. (Pendente remoção de stdout)
		if [message] =~ ".*BackgroundProcess.*"{
			grok{
				match => ["message","\[%{DATESTAMP:timestamp}] %{DATA:STATUS}: (?m)%{GREEDYDATA:TESTE}"]
			}
		} else {
				grok {
					match => ["message","\[%{DATESTAMP:timestamp}] Exceção desconhecida capturada em TransView:(?m)%{DATA:EXCECAO} (?m)%{GREEDYDATA:TESTE}"]
				}
			}	
		date {
    		match => [ "timestamp", "dd/MM/yyyy HH:mm:ss" ]
			timezone => "America/Bahia"

		}
		mutate {
			add_tag => ["FAZENDARIO"]
		}
	# date {
	# 	match => {""}
	# }
	}
}





#correto anterior
#####################################################################
# filter{
# 	if [message] =~ "^\[[0-9]{2}\/" and [message] =~ "\tat" {
# 			if [message] =~ ".*BackgroundProcess.*"{
# 				grok{
# 				match => ["message","\[%{DATESTAMP:timestamp}] %{DATA:STATUS}: (?m)%{GREEDYDATA:TESTE}"]
# 				}
# 			}else {
# 				grok {
# 					match => ["message","\[%{DATESTAMP:timestamp}] Exceção desconhecida capturada em TransView:(?m)%{DATA:EXCECAO} (?m)%{GREEDYDATA:TESTE}"
# 					]
# 				}
# 			}
# 		}else {
# 		drop{}	
#    	}
# 	date {
#     	match => [ "timestamp", "dd/MM/yyyy HH:mm:ss" ]
#     }
# 	# date {
# 	# 	match => {""}
# 	# }
# 	if "stacktrace" in [tags] {
#         mutate {
#             remove_tag => ["_grokparsefailure"]
#         }
#     }
# }

#####################################################################

# match => ["message","\[%{DATESTAMP:timestamp}] (?<STATUS>[a-zA-ZÃ§Ã£]+ [a-zA-Z]+ [a-zA-Z]+ [a-z]+ [a-zA-Z]+):\\n(?<EXCECAO>[a-zA-Z|.]+)\\n(?<STACK>.*)",
# 		"message","\[%{DATESTAMP:timestamp}] %{GREEDYDATA:STATUS}:\\n%{JAVACLASS:EXCECAO}: %{GREEDYDATA:STACKTRACE}"
# filter{
# 	if "message" =~ "(?m)^.*java.*(?:[\r\n]+^\s*at .*|[\r\n]^\s*Caused .*|[\r\n]^\s*BEA.*|[\r\n]^\s*\....*|[\r\n]^\s*java.*|[\r\n]^\s*\;.*)+"{
# 		grok{
# 		match => {
# 			"message" => "%{JAVACLASS:classe} %{GREEDYDATA:STACK}"
# 			}
# 		}
# 	}
# }
# filter {
#     grok {
#     	match => { 		
# 		"message" => "\[%{DATESTAMP:TEMPO}\] %{DATA:PROCESSO}: %{DATA:STATUS}\) %{JAVACLASS:CLASSE}: %{GREEDYDATA:STACK}"
#       		"message" => "\[%{DATESTAMP:TEMPO}\] %{DATA:PROCESSO}: %{GREEDYDATA:STACK}"
#     }
# }


output {
#	stdout {
#        codec => rubydebug
#    }

	# Separação de índices IGESP e FAZENDARIO
	if "IGESP" in [tags]{
		elasticsearch {
			hosts => "elasticsearch:9200"
			user => "logstash"
			password => "3ArwvkriDwUrOEm"
			index => "logstash-igesp"
			ecs_compatibility => disabled
		}
	} else{ 
		elasticsearch {
			hosts => "elasticsearch:9200"
			user => "logstash"
			password => "3ArwvkriDwUrOEm"
			index => "logstash-fazendario"
			ecs_compatibility => disabled
		}
	}
}

